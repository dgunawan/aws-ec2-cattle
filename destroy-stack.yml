AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  TargetStackName:
    Description: The name of the stack to be destroyed
    Type: String

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DeleteLogGroup
            Resource: arn:aws:logs:*:*:*
          
          - Effect: Allow
            Action:
              - cloudformation:DeleteStack
            Resource: "*"
          
          - Effect: Allow
            Action: 
              - iam:DeleteRolePolicy
              - iam:DeleteRole
            Resource: "*"
          
          - Effect: Allow
            Action: 
              - lambda:DeleteFunction
            Resource: "*"
          
          - Effect: Allow
            Action:
              - events:RemoveTargets
            Resource: "*"

          - Effect: Allow
            Action:
              - events:DeleteRule
            Resource: "*"

          - Effect: Allow
            Action:
              - ec2:TerminateInstances
              - ec2:DescribeInstances 
            Resource: "*"

          - Effect: Allow
            Action: 
              - lambda:RemovePermission
              - lambda:InvokeFunction
            Resource: "*"
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${HarakiriLambda}

  HarakiriLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os
          
          def handler(event, context):
            client = boto3.client('cloudformation')
            return client.delete_stack(
                StackName=os.environ['vTargetStackName']
            )

      Runtime: python3.6
      Environment:
        Variables:
          vTargetStackName: !Ref TargetStackName

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "HarakiriLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "HarakiriRule"
          - "Arn"      
          
  HarakiriRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: "ScheduledRule"
      ScheduleExpression: "cron(0/3 * * * ? *)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "HarakiriLambda"
              - "Arn"
          Id: "HarakiriLambdaV1"
          Input: !Sub
          - "{\"StackName\": \"${Stack}\"}"
          - { Stack: !Ref "TargetStackName" }       

Outputs:
  StackRegion:
    Value:
      Ref: "AWS::Region"
  AccountId:
    Value:
      Ref: "AWS::AccountId"
  StackId:
    Value:
      Ref: "AWS::StackId"
  StackName:
    Value:
      Ref: "AWS::StackName"                  