# This stack creates the Event and Lambda that manages the creation and removal of 
# an EC2 resource including the Lambda that manages the removal itself
# boto3 examples https://www.programcreek.com/python/example/97943/boto3.client
# EventBridge: https://aws.amazon.com/eventbridge/faqs/
# https://dev.to/guneysus/developing-a-self-destructing-cloudformation-stack-2ka2

AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ProvEC2CfnStackName:
    Description: Name of the EC2 Cfn stack for provisioning the EC2 instance
    Type: String
    Default: prov-ec2-stack
  ProvEC2CfnTemplateName:
    Description: Name of the EC2 Cfn template for provisioning the EC2 instance
    Type: String
    Default: LambdaAMILookupSample-win.yml
  DecommEC2CfnStackName:
    Description: Name of the EC2 Cfn stack for decommisioning the EC2 instance
    Type: String
    Default: decomm-ec2-stack
  DecommEC2CfnTemplateName:
    Description: Name of the EC2 Cfn template for decommisioning the EC2 instance
    Type: String
    Default: destroy-stack.yml
  DecommCronSchedule:
    Description: Schedule for the delete-lambda
    Type: String
    Default: cron(0/20 * * * ? *)
  CfnStackS3BucketName:
    Description: Name of the S3 bucket for the CloudFormation templates
    Type: String
    Default: http://s3.amazonaws.com/318-auto-deploy

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: create_ec2_lambda_policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogGroups
              - logs:DeleteLogGroup 
              - logs:PutRetentionPolicy
            Resource: arn:aws:logs:*:*:*
          
          - Effect: Allow
            Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
            Resource: "*"
          
          - Effect: Allow
            Action: 
              - iam:CreateRole
              - iam:DeleteRolePolicy
              - iam:DeleteRole
              - iam:PutRolePolicy
              - iam:GetRolePolicy
              - iam:GetRole
              - iam:PassRole
            Resource: "*"
          
          - Effect: Allow
            Action: 
              - lambda:*
            Resource: "*"

          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetObject
            Resource: arn:aws:s3:::*

          - Effect: Allow
            Action:
              - events:RemoveTargets
              - events:DeleteRule
              - events:PutRule 
              - events:DescribeRule
              - events:PutTargets 
            Resource: "*"
          
          - Effect: Allow
            Action:
              - ec2:TerminateInstances
              - ec2:DescribeInstances 
              - ec2:RunInstances 
            Resource: "*"

  ManageEC2Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Environment:
        Variables:
          vProvEC2CfnStackName: !Ref ProvEC2CfnStackName
          vProvEC2CfnTemplateName: !Join ['/', [!Ref CfnStackS3BucketName, !Ref ProvEC2CfnTemplateName]]
          vDecommEC2CfnStackName: !Ref DecommEC2CfnStackName
          vDecommEC2CfnTemplateName: !Join ['/', [!Ref CfnStackS3BucketName, !Ref DecommEC2CfnTemplateName]]
          vDecommCronSchedule: !Ref DecommCronSchedule
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          import botocore

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          cf_client = boto3.client('cloudformation')

          def handler(event, context):
            try:
                resp = cf_client.describe_stacks(StackName = os.environ['vProvEC2CfnStackName'])
                print("Stack already existed:" + os.environ['vProvEC2CfnStackName'])
            except botocore.exceptions.ClientError as e:
                if 'does not exist' in e.response['Error']['Message']:
                  print("Creating provisioning EC2 stack:" + os.environ['vProvEC2CfnStackName'])
                  cf_client.create_stack(
                      StackName = os.environ['vProvEC2CfnStackName'],
                      TemplateURL = os.environ['vProvEC2CfnTemplateName'],
                      Capabilities = ['CAPABILITY_IAM']
                  )

            try:
                resp = cf_client.describe_stacks(StackName = os.environ['vDecommEC2CfnStackName'])
                print("Stack already existed:" + os.environ['vDecommEC2CfnStackName'])      
            except botocore.exceptions.ClientError as e:
                if 'does not exist' in e.response['Error']['Message']:
                  print("Creating decommisioning stack:" + os.environ['vDecommEC2CfnStackName'])
                  cf_client.create_stack(
                      StackName = os.environ['vDecommEC2CfnStackName'],
                      TemplateURL = os.environ['vDecommEC2CfnTemplateName'],
                      Capabilities = ['CAPABILITY_IAM'],
                      Parameters=
                      [
                        {
                            'ParameterKey': 'TargetStackName',
                            'ParameterValue': os.environ['vProvEC2CfnStackName'],
                            'UsePreviousValue': False,
                            'ResolvedValue': 'string'
                        },
                        {
                            'ParameterKey': 'CronSchedule',
                            'ParameterValue': os.environ['vDecommCronSchedule'],
                            'UsePreviousValue': False,
                            'ResolvedValue': 'string'
                        },
                      ]
                    )

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub /aws/lambda/${ManageEC2Lambda} 

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "ManageEC2Lambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ManageEC2LambdaRule"
          - "Arn"      
          
  ManageEC2LambdaRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: "Rule for Lambda that schedules provisioning and decommisioning of EC2"
      ScheduleExpression: "cron(0/15 * * * ? *)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "ManageEC2Lambda"
              - "Arn"
          Id: "ManageEC2LambdaV1"    
