# This stack creates the Event and Lambda that manages the creation and removal of 
# an EC2 resource including the Lambda that manages the removal itself
# boto3 examples https://www.programcreek.com/python/example/97943/boto3.client
# EventBridge: https://aws.amazon.com/eventbridge/faqs/
# https://dev.to/guneysus/developing-a-self-destructing-cloudformation-stack-2ka2

AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ProvEC2CfnStackName:
    Description: Name of the EC2 Cfn stack for provisioning the EC2 instance
    Type: String
    Default: prov-ec2-stack
  ProvEC2CfnTemplateName:
    Description: Name of the EC2 Cfn template for provisioning the EC2 instance
    Type: String
    Default: LambdaAMILookupSample-win.yml
  CfnStackS3BucketName:
    Description: Name of the S3 bucket for the CloudFormation templates
    Type: String
    Default: 318-auto-deploy

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: create_ec2_lambda_policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup 
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogGroups
              - logs:DeleteLogGroup 
              - logs:PutRetentionPolicy
            Resource: arn:aws:logs:*:*:*
          
          - Effect: Allow
            Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
            Resource: "*"
          
          - Effect: Allow
            Action: 
              - iam:CreateRole
              - iam:DeleteRolePolicy
              - iam:DeleteRole
              - iam:PutRolePolicy
              - iam:GetRole
              - iam:GetRolePolicy
              - iam:PassRole
            Resource: "*"
          
          - Effect: Allow
            Action: 
              - lambda:RemovePermission
              - lambda:InvokeFunction
              - lambda:DeleteFunction
              - lambda:CreateFunction 
              - lambda:GetFunctionConfiguration
            Resource: "*" 

          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetObject
            Resource: !Join ["", ["arn:aws:s3:::", !Ref CfnStackS3BucketName, "/*"]]

          - Effect: Allow
            Action:
              - events:RemoveTargets
              - events:DeleteRule
              - events:PutRule 
              - events:DescribeRule
              - events:PutTargets 
            Resource: "*"
          
          - Effect: Allow
            Action:
              - ec2:TerminateInstances
              - ec2:DescribeInstances 
              - ec2:RunInstances 
              - ec2:CreateVolume
              - ec2:DetachVolume
              - ec2:DescribeVolumes
              - ec2:CreateTags
              - ec2:AttachVolume
              - ec2:DeleteVolume
              - ec2:ModifyVolume
              - ec2:ModifyVolumeAttribute
            Resource: "*"

          - Effect: Allow
            Action:
              - kms:DescribeKey
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
              - kms:CreateGrant
            Resource: "*"

  ####### Provision EC2 Lambda #######

  ProvisionEC2Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Environment:
        Variables:
          vProvEC2CfnStackName: !Ref ProvEC2CfnStackName
          vProvEC2CfnTemplateName: !Join ['/', ["https://s3.amazonaws.com", !Ref CfnStackS3BucketName, !Ref ProvEC2CfnTemplateName]]
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          import botocore

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          cf_client = boto3.client('cloudformation')

          def handler(event, context):
            EC2Stack = os.environ['vProvEC2CfnStackName']
            try:
              resp = cf_client.describe_stacks(StackName = EC2Stack)
              print("Stack already existed:" + EC2Stack)
            except botocore.exceptions.ClientError as e:
              if 'does not exist' in e.response['Error']['Message']:
                print("Creating Provision-EC2 stack:" + EC2Stack)
                cf_client.create_stack(
                  StackName = EC2Stack,
                  TemplateURL = os.environ['vProvEC2CfnTemplateName'],
                  Capabilities = ['CAPABILITY_IAM']
                )
  
  PermissionToInvokeProvLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "ProvisionEC2Lambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ProvisionEC2LambdaRule"
          - "Arn"      
          
  ProvisionEC2LambdaRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: "Rule for Lambda that schedules provisioning of EC2"
      ScheduleExpression: "cron(0/10 * * * ? *)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "ProvisionEC2Lambda"
              - "Arn"
          Id: "ProvisionEC2LambdaV1"    

  ####### Decommission EC2 Lambda #######

  DecommissionEC2Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Environment:
        Variables:
          vProvEC2CfnStackName: !Ref ProvEC2CfnStackName
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          import botocore

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          cf_client = boto3.client('cloudformation')

          def handler(event, context):
            EC2Stack = os.environ['vProvEC2CfnStackName']
            try:
              cf_client.describe_stacks(StackName = EC2Stack)
              print("Decommissioning EC2 stack:" + EC2Stack)
              cf_client.delete_stack(StackName = EC2Stack)
            except botocore.exceptions.ClientError as e:
              if 'does not exist' in e.response['Error']['Message']:
                print("EC2 Stack doesn't exist:" + EC2Stack)

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DecommissionEC2Lambda} 
      RetentionInDays: 1

  PermissionToInvokeDecommLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "DecommissionEC2Lambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "DecommissionEC2LambdaRule"
          - "Arn"      
          
  DecommissionEC2LambdaRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: "Rule for Lambda that schedules decommisioning of EC2"
      ScheduleExpression: "cron(0/10 * * * ? *)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "DecommissionEC2Lambda"
              - "Arn"
          Id: "DecommissionEC2LambdaV1"    